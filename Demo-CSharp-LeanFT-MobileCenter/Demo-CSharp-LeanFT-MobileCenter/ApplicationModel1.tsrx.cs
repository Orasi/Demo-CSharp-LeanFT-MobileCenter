//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace Demo_CSharp_LeanFT_MobileCenter
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "12.54")]
	public class ApplicationModel1 : AppModelBase
	{
		#region Constructors

		public ApplicationModel1(ITestObject contextTestObject)
		{
			Name = @"ApplicationModel1";
			CalculatorApplication = new CalculatorApplicationNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public CalculatorApplicationNode CalculatorApplication { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class CalculatorApplicationNode : ApplicationNodeBase
		{
			#region Constructors
		
			public CalculatorApplicationNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				Zero = new ZeroNode(this, applicationModel);
				Plus = new PlusNode(this, applicationModel);
				Seven = new SevenNode(this, applicationModel);
				MobileObjectUiObject = new MobileObjectUiObjectNode(this, applicationModel);
				DisplayName = @"Calculator";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Mobile.ApplicationDescription CreateDescription()
			{
				return new HP.LFT.SDK.Mobile.ApplicationDescription
				{
					Identifier = @"com.android2.calculator3",
					IsPackaged = false
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public ZeroNode Zero { get; private set; }
			public PlusNode Plus { get; private set; }
			public SevenNode Seven { get; private set; }
			public MobileObjectUiObjectNode MobileObjectUiObject { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class ZeroNode : ButtonNodeBase
			{
				#region Constructors
			
				public ZeroNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"0";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.ButtonDescription
					{
						Text = @"0",
						ClassName = @"Button",
						MobileCenterIndex = 25
					};
				}
			
				#endregion
			
			}

			public sealed class PlusNode : ButtonNodeBase
			{
				#region Constructors
			
				public PlusNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"+";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.ButtonDescription
					{
						Text = @"+",
						AccessibilityId = @"plus",
						ClassName = @"Button",
						MobileCenterIndex = 30
					};
				}
			
				#endregion
			
			}

			public sealed class SevenNode : ButtonNodeBase
			{
				#region Constructors
			
				public SevenNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"7";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.ButtonDescription
					{
						Text = @"7",
						ClassName = @"Button",
						MobileCenterIndex = 15
					};
				}
			
				#endregion
			
			}

			public sealed class MobileObjectUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public MobileObjectUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"MobileObject";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.UiObjectDescription
					{
						ClassName = @"View",
						MobileCenterIndex = 10
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public abstract class UiObjectNodeBase : AppModelNodeBase<HP.LFT.SDK.Mobile.IUiObject, HP.LFT.SDK.Mobile.UiObjectDescription>, HP.LFT.SDK.Mobile.IUiObject
		{
			public UiObjectNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void SetFocus()
			{
				 Concrete.SetFocus();
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Tap()
			{
				 Concrete.Tap();
			}
	
			public void Tap(HP.LFT.SDK.Mobile.TapArgs args)
			{
				 Concrete.Tap(args);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Mobile.LongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction, HP.LFT.SDK.Mobile.SwipeArgs args)
			{
				 Concrete.Swipe(direction, args);
			}
	
			public void Pan(HP.LFT.SDK.Location start, HP.LFT.SDK.Location end)
			{
				 Concrete.Pan(start, end);
			}
	
			public void Pan(System.Drawing.Point start, System.Drawing.Point end, HP.LFT.SDK.Mobile.PanArgs args)
			{
				 Concrete.Pan(start, end, args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(double scale, HP.LFT.SDK.Mobile.PinchArgs args)
			{
				 Concrete.Pinch(scale, args);
			}
	
			#endregion
	
			#region Public Properties
	
			public bool IsCheckable
			{
				get { return Concrete.IsCheckable; }		
			}
	
			public bool IsChecked
			{
				get { return Concrete.IsChecked; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public string AccessibilityId
			{
				get { return Concrete.AccessibilityId; }		
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Container
			{
				get { return Concrete.Container; }		
			}
	
			public bool IsClickable
			{
				get { return Concrete.IsClickable; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public bool IsFocusable
			{
				get { return Concrete.IsFocusable; }		
			}
	
			public string ResourceId
			{
				get { return Concrete.ResourceId; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.Mobile.IButton, HP.LFT.SDK.Mobile.ButtonDescription>, HP.LFT.SDK.Mobile.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Tap()
			{
				 Concrete.Tap();
			}
	
			public void Tap(HP.LFT.SDK.Mobile.TapArgs args)
			{
				 Concrete.Tap(args);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Mobile.LongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction, HP.LFT.SDK.Mobile.SwipeArgs args)
			{
				 Concrete.Swipe(direction, args);
			}
	
			public void Pan(HP.LFT.SDK.Location start, HP.LFT.SDK.Location end)
			{
				 Concrete.Pan(start, end);
			}
	
			public void Pan(System.Drawing.Point start, System.Drawing.Point end, HP.LFT.SDK.Mobile.PanArgs args)
			{
				 Concrete.Pan(start, end, args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(double scale, HP.LFT.SDK.Mobile.PinchArgs args)
			{
				 Concrete.Pinch(scale, args);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public string AccessibilityId
			{
				get { return Concrete.AccessibilityId; }		
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Container
			{
				get { return Concrete.Container; }		
			}
	
			public bool IsClickable
			{
				get { return Concrete.IsClickable; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public bool IsFocusable
			{
				get { return Concrete.IsFocusable; }		
			}
	
			public string ResourceId
			{
				get { return Concrete.ResourceId; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class ApplicationNodeBase : AppModelNodeBase<HP.LFT.SDK.Mobile.IApplication, HP.LFT.SDK.Mobile.ApplicationDescription>, HP.LFT.SDK.Mobile.IApplication
		{
			public ApplicationNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void Launch()
			{
				 Concrete.Launch();
			}
	
			public void Restart()
			{
				 Concrete.Restart();
			}
	
			public void Install()
			{
				 Concrete.Install();
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Identifier
			{
				get { return Concrete.Identifier; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Version
			{
				get { return Concrete.Version; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		#endregion
	}
}
